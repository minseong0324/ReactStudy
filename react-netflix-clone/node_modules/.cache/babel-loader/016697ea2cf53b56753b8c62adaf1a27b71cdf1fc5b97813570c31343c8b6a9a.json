{"ast":null,"code":"var _jsxFileName = \"/Users/kimminseong/Desktop/ReactStudy/react-netflix-clone/src/components/Banner.js\",\n  _s = $RefreshSig$();\nimport axios from '../api/axios';\nimport React, { useEffect, useState } from 'react';\nimport requests from '../api/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Banner() {\n  _s();\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    //현재 상영중인 영화 정보를 가져오기(여러 영화)\n    const request = await axios.get(requests.fetchNowPlaying);\n\n    //여러 영화 중 영화 하나의 ID를 가져오기\n    const movieId = request.data.results[Math.floor(Math.random() * request.data.results.length)].id;\n\n    //특정 영화의 더 상세한 정보를 가져오기(비디오 정보도 포함)\n    const results = await axios.get(`movie/${movieId}`, {\n      params: {\n        append_to_response: \"videos\"\n      }\n    });\n    console.log(results);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(Banner, \"jmRb9xsBKsoKCGHCjtfP3JDQESc=\");\n_c = Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["axios","React","useEffect","useState","requests","jsxDEV","_jsxDEV","Banner","_s","movie","setMovie","fetchData","request","get","fetchNowPlaying","movieId","data","results","Math","floor","random","length","id","params","append_to_response","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kimminseong/Desktop/ReactStudy/react-netflix-clone/src/components/Banner.js"],"sourcesContent":["import axios from '../api/axios';\nimport React, { useEffect, useState } from 'react'\nimport requests from '../api/requests';\n\nexport default function Banner() {\n    const [movie, setMovie] = useState([]);\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const fetchData = async () => {\n        //현재 상영중인 영화 정보를 가져오기(여러 영화)\n        const request = await axios.get(requests.fetchNowPlaying);\n        \n        //여러 영화 중 영화 하나의 ID를 가져오기\n        const movieId = request.data.results[\n            Math.floor(Math.random() * request.data.results.length)\n        ].id;\n\n        //특정 영화의 더 상세한 정보를 가져오기(비디오 정보도 포함)\n        const results = await axios.get(`movie/${movieId}`, {\n            params: { append_to_response: \"videos\" },\n        });\n        console.log(results);\n    };\n\n\n    return (\n        <div></div>\n    )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,cAAc;AAChC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtCD,SAAS,CAAC,MAAM;IACZS,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B;IACA,MAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACT,QAAQ,CAACU,eAAe,CAAC;;IAEzD;IACA,MAAMC,OAAO,GAAGH,OAAO,CAACI,IAAI,CAACC,OAAO,CAChCC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,OAAO,CAACI,IAAI,CAACC,OAAO,CAACI,MAAM,CAAC,CAC1D,CAACC,EAAE;;IAEJ;IACA,MAAML,OAAO,GAAG,MAAMjB,KAAK,CAACa,GAAG,CAAE,SAAQE,OAAQ,EAAC,EAAE;MAChDQ,MAAM,EAAE;QAAEC,kBAAkB,EAAE;MAAS;IAC3C,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;EACxB,CAAC;EAGD,oBACIX,OAAA;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAU,CAAC;AAEnB;AAACtB,EAAA,CA1BuBD,MAAM;AAAAwB,EAAA,GAANxB,MAAM;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}