{"ast":null,"code":"var _jsxFileName = \"/Users/kimminseong/Desktop/ReactStudy/react-netflix-clone/src/pages/DetailPage/index.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from '../../api/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DetailPage() {\n  _s();\n  const {\n    movieId\n  } = useParams();\n  const [movie, setMovie] = useState({}); // 영화 정보 가져온 것을 state에 넣어줘야 한다.\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(`/movie/${movieId}`);\n      setMovie(request.data); // 정보들을 movie state에 넣어준다.\n    }\n\n    fetchData();\n  }, [movieId]); // movieId가 바뀔 때마다 fetchData를 call해주기\n\n  if (movie) return null; // movie가 없을 때는 아무것도 보여주지 않기\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"DetailPage\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(DetailPage, \"coIrlhpkullQwzwWh9m4GxeJO5Q=\", false, function () {\n  return [useParams];\n});\n_c = DetailPage;\nvar _c;\n$RefreshReg$(_c, \"DetailPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","DetailPage","_s","movieId","movie","setMovie","fetchData","request","get","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kimminseong/Desktop/ReactStudy/react-netflix-clone/src/pages/DetailPage/index.js"],"sourcesContent":["import React from 'react'\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from '../../api/axios';\n\nexport default function DetailPage() {\n  const { movieId } = useParams();\n  const[movie, setMovie] = useState({}); // 영화 정보 가져온 것을 state에 넣어줘야 한다.\n\n  useEffect(() => {\n    async function fetchData()  {\n      const request = await axios.get (`/movie/${movieId}`);\n      setMovie(request.data); // 정보들을 movie state에 넣어준다.\n    }\n    fetchData();\n  }, [movieId]); // movieId가 바뀔 때마다 fetchData를 call해주기\n\n  if(movie) return null; // movie가 없을 때는 아무것도 보여주지 않기\n\n  return (\n    <div>DetailPage</div>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAQ,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC/B,MAAK,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvCD,SAAS,CAAC,MAAM;IACd,eAAeW,SAASA,CAAA,EAAI;MAC1B,MAAMC,OAAO,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAG,UAASL,OAAQ,EAAC,CAAC;MACrDE,QAAQ,CAACE,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IAC1B;;IACAH,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEf,IAAGC,KAAK,EAAE,OAAO,IAAI,CAAC,CAAC;;EAEvB,oBACEJ,OAAA;IAAAU,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEzB;AAACZ,EAAA,CAjBuBD,UAAU;EAAA,QACZJ,SAAS;AAAA;AAAAkB,EAAA,GADPd,UAAU;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}