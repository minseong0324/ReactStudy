{"ast":null,"code":"var _jsxFileName = \"/Users/kimminseong/Desktop/ReactStudy/react-netflix-clone/src/pages/SearchPage/index.js\",\n  _s2 = $RefreshSig$();\nimport axios from '../../api/axios';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport \"./SearchPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchPage() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [searchResults, setSearchResults] = useState([]); // searchResults 상태를 관리하는 state를 생성합니다.\n\n  const useQuery = () => {\n    _s();\n    // URL의 query string을 가져오는 함수입니다.\n    return new URLSearchParams(useLocation().search);\n  };\n  _s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n    return [useLocation];\n  });\n  let query = useQuery(); // query 변수에 query string을 저장합니다.\n  const searchTerm = query.get(\"q\"); // searchTerm 변수에 검색어를 저장합니다.\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n  console.log('searchTerm', searchTerm);\n  useEffect(() => {\n    // 컴포넌트가 마운트되거나 searchTerm이 업데이트 될 때마다 실행됩니다.\n    if (searchTerm) {\n      fetchSearchMovie(debouncedsearchTerm); // searchTerm이 있는 경우 fetchSearchMovie 함수를 호출합니다.\n    }\n  }, [searchTerm]);\n  const fetchSearchMovie = async searchTerm => {\n    // 검색어에 따른 영화 데이터를 가져오는 함수입니다.\n    try {\n      const request = await axios.get(\n      // API 요청을 보냅니다.\n      `/search/multi?include_adult=false&query=${searchTerm}`);\n      console.log(request);\n      setSearchResults(request.data.results); // 결과를 searchResults 상태에 저장합니다.\n    } catch (error) {\n      console.log(\"error\", error); // 에러가 발생한 경우 에러를 출력합니다.\n    }\n  };\n\n  const renderSearchResults = () => {\n    // 검색 결과를 렌더링하는 함수입니다.\n    return searchResults.length > 0 ?\n    /*#__PURE__*/\n    // 검색 결과가 있는 경우\n    _jsxDEV(\"section\", {\n      className: \"search-container\",\n      children: searchResults.map(movie => {\n        // 결과 배열을 순회하며\n        if (movie.backdrop_path !== null && movie.media_type !== \"person\") {\n          // 이미지가 있고, 결과가 사람이 아닌 경우\n          const movieImageUrl = \"https://image.tmdb.org/t/p/w500\" + movie.backdrop_path;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"movie__column-poster\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: movieImageUrl,\n                alt: \"movie\",\n                className: \"movie__poster\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // 검색 결과가 없는 경우\n    _jsxDEV(\"section\", {\n      className: \"no-results\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-results__text\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uCC3E\\uACE0\\uC790 \\uD558\\uB294 \\uAC80\\uC0C9\\uC5B4\\\"\", searchTerm, \"\\\"\\uC5D0 \\uB9DE\\uB294 \\uC601\\uD654\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this);\n  };\n  return renderSearchResults(); // renderSearchResults 함수의 결과를 반환합니다.\n}\n_s2(SearchPage, \"RZF9D6CdnQ+zPz/vY1c2R7RQwy8=\", true);\n_c = SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["axios","React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","SearchPage","_s2","_s","$RefreshSig$","searchResults","setSearchResults","useQuery","URLSearchParams","search","query","searchTerm","get","debouncedSearchTerm","useDebounce","console","log","fetchSearchMovie","debouncedsearchTerm","request","data","results","error","renderSearchResults","length","className","children","map","movie","backdrop_path","media_type","movieImageUrl","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kimminseong/Desktop/ReactStudy/react-netflix-clone/src/pages/SearchPage/index.js"],"sourcesContent":["import axios from '../../api/axios';\nimport React, { useEffect, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport \"./SearchPage.css\"\n\nexport default function SearchPage() {\n\n    const [searchResults, setSearchResults] = useState([]); // searchResults 상태를 관리하는 state를 생성합니다.\n\nconst useQuery =() => { // URL의 query string을 가져오는 함수입니다.\n    return new URLSearchParams(useLocation().search)\n}\n\nlet query = useQuery(); // query 변수에 query string을 저장합니다.\nconst searchTerm = query.get(\"q\") // searchTerm 변수에 검색어를 저장합니다.\nconst debouncedSearchTerm = useDebounce(searchTerm, 500);\n\nconsole.log('searchTerm',searchTerm);\n\nuseEffect(() => { // 컴포넌트가 마운트되거나 searchTerm이 업데이트 될 때마다 실행됩니다.\n    if(searchTerm) {\n        fetchSearchMovie(debouncedsearchTerm); // searchTerm이 있는 경우 fetchSearchMovie 함수를 호출합니다.\n    }\n}, [searchTerm]);\n\nconst fetchSearchMovie = async (searchTerm) => { // 검색어에 따른 영화 데이터를 가져오는 함수입니다.\n    try {\n        const request = await axios.get( // API 요청을 보냅니다.\n            `/search/multi?include_adult=false&query=${searchTerm}`\n        )\n        console.log(request);\n        setSearchResults(request.data.results); // 결과를 searchResults 상태에 저장합니다.\n    } catch (error) {\n        console.log(\"error\", error) // 에러가 발생한 경우 에러를 출력합니다.\n    }\n}\n\nconst renderSearchResults = () => { // 검색 결과를 렌더링하는 함수입니다.\n    return searchResults.length > 0 ? ( // 검색 결과가 있는 경우\n        <section className=\"search-container\">\n            {searchResults.map((movie) => { // 결과 배열을 순회하며\n                if(movie.backdrop_path !== null && movie.media_type !== \"person\") { // 이미지가 있고, 결과가 사람이 아닌 경우\n                    const movieImageUrl = \n                    \"https://image.tmdb.org/t/p/w500\" + movie.backdrop_path\n                    return(\n                        <div className='movie'>\n                            <div\n                            className=\"movie__column-poster\"\n                            >\n                                <img\n                                src={movieImageUrl} alt=\"movie\"\n                                className='movie__poster'\n                                />\n                            </div>\n                        </div>\n                    )\n                }\n            })}\n        </section>\n    ) : ( // 검색 결과가 없는 경우\n        <section className='no-results'>\n            <div className='no-results__text'>\n                <p>찾고자 하는 검색어\"{searchTerm}\"에 맞는 영화가 없습니다.</p>\n            </div>\n        </section>\n    )\n\n}\nreturn renderSearchResults(); // renderSearchResults 함수의 결과를 반환합니다.\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}